
#include "hgimg4.as"

	_onepadinit 1

	repeat
		redraw 0
		gpdraw

		pos 8, 8
		color 0,204,0
		getreq fps, SYSREQ_FPS
		mes strf("%d [fps]", fps)

		repeat 10
			mes strf("%d, %f", cnt, _pad(cnt))
		loop

		pos 240, 8
		repeat 16
			mes strf("%d, %d", cnt, int(_pad(cnt + 10)))
			_pad(cnt + 10) = 0.0
		loop

		redraw 1
		await 1000/30
	loop


#deffunc _onepadinit int _press
// _press: 1 のときは押したときだけボタンを1.0に更新する
// 読み取ったとき自分で0.0に書き換えること

	_elnum = (10 + 16) * 1
	_ostype = sysinfo(0)
	if instr(_ostype, 0, "Emscripten") < 0 {
//#include "mod_joystick2.as"
		ddim _pad, _elnum
		return
	}

	_bytenum = _elnum * 8 + 16
	sdim _buf, _bytenum
	_ptr = varptr(_buf)
	_aligned = ((_ptr + 16) >> 4) << 4
	dupptr _pad, _aligned, _elnum * 8, vartype("double")

	_code = strf("const _ptr = %d;", _aligned)
	_code += strf("const _elnum = %d;", _elnum)
	_code += strf("globalThis._press = %d;", _press)
	_code += {"
const _view = new Float64Array(Module.HEAPF64.buffer, _ptr, _elnum);
const _update = () => {
	requestAnimationFrame(() => {
		_update();
	});
	
	const pads = navigator.getGamepads();
	for (const pad of pads) {
		if (!pad) {
			continue;
		}
		const axesnum = pad.axes.length;
		const buttonnum = pad.buttons.length;
		for (let i = 0; i < 10; ++i) {
			_view[i] = pad.axes?.[i] ?? 0;
		}
		for (let i = 0; i < 16; ++i) {
			const pressed = pad.buttons?.[i]?.pressed ? 1 : 0;
			if (globalThis._press & 0x1) {
				if (pressed) {
					_view[i + 10] = 1;
				}
			} else {
				_view[i + 10] = pressed
			}
		}
		return;
	}

	for (let i = 0; i < _elnum; ++i) {
		_view[i] = 0;
	}
};
_update();
"}
	exec _code
	return

